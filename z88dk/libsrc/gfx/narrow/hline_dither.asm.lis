/tmp/tmpXXzzHp06.asm:
     1                          MODULE hline_dither_asm
     2                          LINE 0, "hline_dither.asm"
hline_dither.asm:
                                
     1                          ;
     2                          ;    z88dk GFX library
     3                          ;
     4                          ;    Draw a dithered horizontal line basing
     5                          ;    its pattern on an 'intensity' parameter.
     6                          ;    Basic concept by Rafael de Oliveira Jannone
     7                          ;
     8                          ;
     9                          ;    hline_dither(int x1, int y1, int x2, unsigned char intensity)
    10                          ;
    11                          
    12                          IF !__CPU_INTEL__ & !__CPU_GBZ80__
    13                              SECTION  code_graphics
    14                              PUBLIC    surface_hline_dither
    15                              PUBLIC    _surface_hline_dither
    16                              EXTERN    base_graphics
    17                          
    18                              EXTERN surface_pixeladdress
    19                              EXTERN leftbitmask, rightbitmask
    20                          
    21                          ;
    22                          ;    $Id: hline_dither.asm,v 1.3 2016-04-23 20:37:40 dom Exp $
    23                          ;
    24                          
    25                          .surface_hline_dither
    26                          ._surface_hline_dither
    27                              push    ix
    28                              ld    ix,2
    29                              add    ix,sp
    30                          
    31                              ld    l,(ix+10)    ; surface struct
    32                              ld    h,(ix+11)
    33                              ld    de,6    ; shift to screen buffer ptr
    34                              add    hl,de
    35                              ld    e,(hl)
    36                              inc    hl
    37                              ld    d,(hl)
    38                              ld    (base_graphics),de
    39                          
    40                              ld    a,(ix+6)
    41                              and    3
    42                              ld    e,a
    43                          
    44                              ld    a,(ix+2)
    45                              add    a
    46                              add    a
    47                              add    e    ; 192+40=232 ..we are still inside the byte
    48                              ld    d,0
    49                              ld    hl,_dithpat
    50                              add    hl,de
    51                              ld    a,(hl)
    52                              ;push    af    ; save pattern for current line
    53                              ld    (clear_row_loop+1),a
    54                              ex    af,af
    55                          
    56                              ld    h,(ix+8)
    57                              ld    l,(ix+6)
    58                          
    59                          
    60                              ;ld    a,(ix+4)
    61                              ;sub    h
    62                              ;ld    b,a
    63                          
    64                              ;ld    (coord+1),hl    ; SMC: remember y,x
    65                              ;inc    b
    66                              ;push    bc    ; remember height
    67                              ;push    bc
    68                              push    hl
    69                              call    surface_pixeladdress    ; bitpos0 = surface_pixeladdress(x,y)
    70                              pop    hl
    71                              call    leftbitmask    ; LeftBitMask(bitpos0)
    72                              ld    (bitmaskl1+1),a    ; SMC
    73                              ld    (bitmaskl2+1),a    ; SMC
    74                              ;pop    bc
    75                              ;ld    a,h
    76                              ;add    b
    77                              ld    a,(ix+4)
    78                              ;dec    a
    79                              dec    a
    80                              ld    h,a
    81                              push    de
    82                              call    surface_pixeladdress    ; bitpos1 = surface_pixeladdress(x+width-1,y)
    83                              call    rightbitmask    ; RightBitMask(bitpos1)
    84                              ld    (bitmaskr1+1),a
    85                              ld    (bitmaskr2+1),a    ; bitmask1 = LeftBitMask(bitpos0)
    86                              pop    hl
    87                              push    hl    ; adr0
    88                              ex    de,hl
    89                              cp    a
    90                              sbc    hl,de    ; (adr1-adr0)/8
    91                              ld    a,l
    92                              ld    (rowbytes1+1),a
    93                              ld    (rowbytes2+1),a    ; rowbytes = (adr1-adr0) div 8, no. of bytes in row
    94                                 ; 0 means that area is within same address
    95                                 ; FOR h = 1 TO height
    96                              pop    hl    ; adr0
    97                          .clear_height
    98                              xor    a
    99                          .rowbytes1    cp    0    ; if rowbytes = 0
   100                              jr    nz, clear_row    ; area is within one byte...
   101                              ld    a,(hl)
   102                          .bitmaskl1    and    0    ; preserve bits of leftmost side of byte
   103                              ld    b,a
   104                              ld    a,(hl)
   105                          .bitmaskr1    and    0    ; preserve bits of rightmost side of byte
   106                              or    b    ; merge preserved bits of left side
   107                              ld    (hl),a    ; (offset) = byte
   108                              ;;jr    clear_nextrow    ; else
   109                              jr    end_cleararea
   110                          .clear_row       ; clear area is defined as rows of bytes
   111                              ld    a,(hl)
   112                          .bitmaskl2    and    0    ; preserve only leftmost bits (outside of area)
   113                              ld    (hl),a    ; (offset) = (offset) AND bitmask0
   114                              inc    hl    ; offset += 1 (8 bits)
   115                          .rowbytes2    ld    b,0    ; r = rowbytes
   116                              dec    b    ; --r
   117                              jr    z, row_cleared    ; if    ( r )
   118                          .clear_row_loop       ; do
   119                              ld    (hl),0    ; (offset) = 0
   120                              inc    hl    ; offset += 1 (8 bits)
   121                              djnz    clear_row_loop    ; while ( r-- != 0 )
   122                          .row_cleared    ld    a,(hl)    ; byte = (adr1)
   123                          .bitmaskr2    and    0
   124                              ld    (hl),a    ; preserve only rightmost side of byte (outside area)
   125                          
   126                          ;.clear_nextrow
   127                          ;.coord    ld    hl,0    ; SMC -> y,x
   128                          ;    inc    l
   129                          ;    ld    (coord+1),hl    ; SMC -> y,x
   130                          ;    call    surface_pixeladdress
   131                          ;    ex    de,hl    ; put adr0 in hl for next row
   132                          ;
   133                          ;       ; END FOR    h
   134                          ;.height    pop    bc
   135                          ;    dec    c    ; height
   136                          ;    push    bc
   137                          ;    jr    nz, clear_height
   138                          ;    pop    bc
   139                          
   140                          .end_cleararea    pop    ix
   141                              ret
   142                          
   143                          
   144                          
   145                          
   146                          
   147                          
   148                          
   149                          
   150                          
   151                          _dithpat:
   152                          
   153                              defb    @00000000
   154                              defb    @00000000
   155                              defb    @00000000
   156                              defb    @00000000
   157                          
   158                              defb    @00000010
   159                              defb    @00000000
   160                              defb    @00100000
   161                              defb    @00000000
   162                          
   163                              defb    @00000010
   164                              defb    @10000000
   165                              defb    @00100000
   166                              defb    @00001000
   167                          
   168                              ;defb    @00100010
   169                              ;defb    @10001000
   170                              ;defb    @00100010
   171                              ;defb    @10001000
   172                          
   173                              defb    @00010100
   174                              defb    @01000001
   175                              defb    @00010100
   176                              defb    @01000001
   177                          
   178                              ;defb    @00010100
   179                              ;defb    @01000001
   180                              ;defb    @10010100
   181                              ;defb    @01001001
   182                          
   183                              defb    @01000101
   184                              defb    @10101000
   185                              defb    @00010101
   186                              defb    @10101010
   187                          
   188                              defb    @01010101
   189                              defb    @10101010
   190                              defb    @01010101
   191                              defb    @10101010
   192                          
   193                              defb    @11011101
   194                              defb    @10101010
   195                              defb    @01110111
   196                              defb    @10101010
   197                          
   198                              ;defb    @11111111
   199                              ;defb    @10101010
   200                              ;defb    @11111111
   201                              ;defb    @10101010
   202                          
   203                              defb    @11011101
   204                              defb    @01110111
   205                              defb    @11011101
   206                              defb    @01110111
   207                          
   208                              defb    @11111101
   209                              defb    @01111111
   210                              defb    @11011111
   211                              defb    @11110111
   212                          
   213                              defb    @11111111
   214                              defb    @11111111
   215                              defb    @11111111
   216                              defb    @11111111
   217                          ENDIF
   218                          
